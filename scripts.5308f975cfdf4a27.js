function findInverseMatrix(j,b){function s(t){return Math.abs(t)}function O(t,l){if(t.length!==l.length&&t[0].length!==l[0].length)return!1;const e=JSON.parse(JSON.stringify(t));for(let n=0;n<e.length;n++)for(let f=0;f<e[0].length;f++)e[n][f]+=l[n][f];return e}function i(t,l){if(t[0].length!==l.length)return!1;const e=[];for(let n=0;n<t.length;n++)e.push([]);for(let n=0;n<t.length;n++)for(let f=0;f<l[0].length;f++){let o=0;for(let r=0;r<t[0].length;r++)for(let u=0;u<l.length;u++)r===u&&(o+=t[n][r]*l[u][f]);e[n].push(o)}return e}function p(t){let l=!0;for(let e=0;e<t.length;e++){let n=0,f=0;for(let o=0;o<t.length;o++)n+=s(t[e][o]),e===o&&(n-=s(t[e][o]),f=s(t[e][o])),o===t.length-1&&n>=f&&(l=!1)}if(l)return"row";l=!0;for(let e=0;e<t.length;e++){let n=0,f=0;for(let o=0;o<t.length;o++)n+=s(t[o][e]),e===o&&(n-=s(t[o][e]),f=s(t[o][e])),o===t.length-1&&n>=f&&(l=!1)}return!!l&&"column"}function S(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<l.length;e++)l.length!==t[0].length&&l[e].pop();return l}function w(t,l,e,n){return t*N("row",d(l,e))/(1-t)<n}function d(t,l){const e=JSON.parse(JSON.stringify(t));for(let n=0;n<t.length;n++)for(let f=0;f<t[0].length;f++)e[n][f]=t[n][f]-l[n][f];return e}function M(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<t.length;e++)for(let n=0;n<t.length;n++)l[e][n]=t[e][n]/t[e][e],l[e][n]=e===n?1-l[e][n]:-1*l[e][n];return l}function N(t,l){const e=[];if("row"===t)for(let n=0;n<l.length;n++){let f=0;for(let o=0;o<l[0].length;o++)f+=s(l[n][o]);e.push(f)}else if("column"===t){if(1===l[0].length){let n=0;for(let f=0;f<l.length;f++)n+=s(l[f][0]);return n}for(let n=0;n<l.length;n++){let f=0;for(let o=0;o<l[0].length;o++)f+=s(l[o][n]);e.push(f)}}return Math.max(...e)}function y(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<t.length;e++)for(let n=0;n<t.length;n++)l[e][n]=e===n?1:0;return l}function I(t,l,e,n,f){return t*(l*N("column",d(e,n)))/(1-l)<f}return function T(t,l){if("row"===p(t)){const e=S(t),n=y(e),f=function k(t,l){const e=JSON.parse(JSON.stringify(t));for(let n=0;n<t.length;n++)for(let f=0;f<t.length;f++)n===f&&(e[n][f]=e[n][f]/l[n][f]);return e}(n,e),o=M(e),r=N("row",o);let u=0,h=n,c=[];do{u++,c=JSON.parse(JSON.stringify(h)),h=O(i(o,c),f)}while(!w(r,h,c,l));return{matrix:h,count:u,matrixType:p(t),q:r}}if("column"===p(t)){const e=S(t),n=function R(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<t.length;e++)for(let n=0;n<t.length;n++)l[e][n]=e===n?1/t[e][n]:0;return l}(e),f=M(i(n,e)),o=y(e),r=i(n,o),u=N("column",d(o,i(e,n))),h=function D(t){let l=s(t[0][0]),e=s(t[0][0]);for(let n=0;n<t.length;n++)for(let f=0;f<t.length;f++)n===f&&(l<=s(t[n][f])&&(l=s(t[n][f])),e>=s(t[n][f])&&(e=s(t[n][f])));return l/e}(e);let c=0,g=o,J=[];do{c++,J=JSON.parse(JSON.stringify(g)),g=O(i(f,J),r)}while(!I(h,u,g,J,l));return{matrix:g,count:c,matrixType:p(t),q:u}}return!1}(j,b)}function findX(j,b){function s(t){return Math.abs(t)}function O(t,l){if(t.length!==l.length&&t[0].length!==l[0].length)return!1;const e=JSON.parse(JSON.stringify(t));for(let n=0;n<e.length;n++)for(let f=0;f<e[0].length;f++)e[n][f]+=l[n][f];return e}function i(t,l){if(t[0].length!==l.length)return!1;const e=[];for(let n=0;n<t.length;n++)e.push([]);for(let n=0;n<t.length;n++)for(let f=0;f<l[0].length;f++){let o=0;for(let r=0;r<t[0].length;r++)for(let u=0;u<l.length;u++)r===u&&(o+=t[n][r]*l[u][f]);e[n].push(o)}return e}function p(t){let l=!0;for(let e=0;e<t.length;e++){let n=0,f=0;for(let o=0;o<t.length;o++)n+=s(t[e][o]),e===o&&(n-=s(t[e][o]),f=s(t[e][o])),o===t.length-1&&n>=f&&(l=!1)}if(l)return"row";l=!0;for(let e=0;e<t.length;e++){let n=0,f=0;for(let o=0;o<t.length;o++)n+=s(t[o][e]),e===o&&(n-=s(t[o][e]),f=s(t[o][e])),o===t.length-1&&n>=f&&(l=!1)}return!!l&&"column"}function S(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<l.length;e++)l.length!==t[0].length&&l[e].pop();return l}function w(t,l,e,n){return t*N("row",d(l,e))/(1-t)<n}function d(t,l){const e=JSON.parse(JSON.stringify(t));for(let n=0;n<t.length;n++)for(let f=0;f<t[0].length;f++)e[n][f]=t[n][f]-l[n][f];return e}function M(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<t.length;e++)for(let n=0;n<t.length;n++)l[e][n]=t[e][n]/t[e][e],l[e][n]=e===n?1-l[e][n]:-1*l[e][n];return l}function N(t,l){const e=[];if("row"===t)for(let n=0;n<l.length;n++){let f=0;for(let o=0;o<l[0].length;o++)f+=s(l[n][o]);e.push(f)}else if("column"===t){if(1===l[0].length){let n=0;for(let f=0;f<l.length;f++)n+=s(l[f][0]);return n}for(let n=0;n<l.length;n++){let f=0;for(let o=0;o<l[0].length;o++)f+=s(l[o][n]);e.push(f)}}return Math.max(...e)}function I(t,l,e,n,f){return t*(l*N("column",d(e,n)))/(1-l)<f}return function T(t,l){if("row"===p(t)){const e=S(t),n=function k(t){const l=[];for(let e=0;e<t.length;e++)l.push([0]);for(let e=0;e<t.length;e++)for(let n=0;n<t.length;n++)e===n&&(l[e][0]=t[e][t.length]/t[e][n]);return l}(t),f=M(e),o=N("row",f);let r=0,u=[];for(let c=0;c<t.length;c++)u.push([0]);let h=[];do{r++,h=JSON.parse(JSON.stringify(u)),u=O(i(f,h),n)}while(!w(o,u,h,l));return{matrix:u,count:r,matrixType:p(t),q:o}}if("column"===p(t)){const e=S(t),n=function R(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<t.length;e++)for(let n=0;n<t.length;n++)l[e][n]=e===n?1/t[e][n]:0;return l}(e),f=M(i(n,e)),o=i(n,function X(t){const l=[];for(let e=0;e<t.length;e++)l.push([]);for(let e=0;e<t.length;e++)l[e].push(t[e][t.length]);return l}(t)),r=function y(t){const l=JSON.parse(JSON.stringify(t));for(let e=0;e<t.length;e++)for(let n=0;n<t.length;n++)l[e][n]=e===n?1:0;return l}(e),u=N("column",d(r,i(e,n))),h=function D(t){let l=s(t[0][0]),e=s(t[0][0]);for(let n=0;n<t.length;n++)for(let f=0;f<t.length;f++)n===f&&(l<=s(t[n][f])&&(l=s(t[n][f])),e>=s(t[n][f])&&(e=s(t[n][f])));return l/e}(e);let c=0,g=[];for(let C=0;C<t.length;C++)g.push([0]);let J=[];do{c++,J=JSON.parse(JSON.stringify(g)),g=O(i(f,J),o)}while(!I(h,u,g,J,l));return{matrix:g,count:c,matrixType:p(t),q:u}}return console.log("oK"),!1}(j,b)}